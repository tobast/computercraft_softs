--[[
	Reads from rednet, and displays data about KWGs using kwg_controller
--]]

MODEM_SIDE='left'
SCREEN_SIDE='top'
QUERY_TYPES={'name','state','energy_prod','rotor_dmg_percent'}

---------- END CONFIG ---------
os.loadAPI('/lib/slot_sig')
nextTimer = 0
iterId=0
windgens={}
results={}
remPackets=0

function displayResults()
	local screen = peripheral.wrap(SCREEN_SIDE)
	screen.clear()
	screen.setCursorPos(1,1)

	for _,wg in results do
		screen.write(wg.name)
		local x,y=screen.getCursorPos()
		screen.setCursorPos(1,y+1)
		screen.write("Prod: ")
		screen.write(wg.energy_prod)
		screen.write(" EU/t")
		screen.setCursorPos(1,y+2)
		
		screen.write("Stopped: ")
		if(wg.state == false) then
			screen.write("YES")
		else
			screen.write("NO")
		end
		screen.setCursorPos(1,y+3)

		screen.write("Rotor: ")
		screen.write(wg.rotor_dmg_percent)
		screen.write("%")

		screen.setCursorPos(1,y+5)
	end
end

function onRednet(data)
	local sender=data[1]
	local msg=data[2]

	if(msg.type ~= 'kwg_answer' or msg.query == nil) then
		return
	end
	
	local wgId = nil
	for k,wg in pairs(windgens) do
		if(wg == sender) then
			wgId=k
			break
		end
	end
	if(wgId == nil) then
		return
	end

	if(results[wgId] == nil) then
		results[wgId]={}
	end

	results[wgId][msg.query] = msg.val
	remPackets = remPackets - 1

	if(remPackets == 0) then
		displayResults()
		results={}
	end
end

function mainLoop(data)
	if(data[1] ~= nextTimer) then
		return
	end

	if(iterId == 0) then
		windgens[1],windgens[2],windgens[3],windgens[4],windgens[5],windgens[6]=rednet.lookup('kwg')
	end

	for k,wg in pairs(wingens) do
		for _,query in pairs(QUERY_TYPES) do
			rednet.send(wg, {type='query', query=query})
			remPackets = remPackets+1
		end
	end

	iterId=iterId % 10
	nextTimer = os.startTimer(3)
end

function main()
	rednet.open(MODEM_SIDE)

	slot_sig.connectSlot('rednet_message', onRednet)
	slot_sig.connectSlot('timer', mainLoop)

	nextTimer = os.startTimer(1)
	slot_sig.run()
end

main()
